generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id    Int    @id @default(autoincrement())
  email String @unique // <-- add unique attribute
  posts Post[]
}

model Post {
  id          Int    @id @default(autoincrement())
  authorEmail String
  author      User   @relation(fields: [authorEmail], references: [email])
}

// The following example demonstrates how to create a 1-n relation in SQL using a composite key (firstName and lastName):
// CREATE TABLE "User" (
//     firstName TEXT,
//     lastName TEXT,
//     PRIMARY KEY ("firstName","lastName")
// );
// CREATE TABLE "Post" (
//     id SERIAL PRIMARY KEY,
//     "authorFirstName" TEXT NOT NULL,
//     "authorLastName" TEXT NOT NULL,
//     FOREIGN KEY ("authorFirstName", "authorLastName") REFERENCES "User"("firstName", "lastName")
// );


// In MySQL, you can create a foreign key with only an index on the referenced side, and not a unique constraint. In Prisma ORM versions 4.0.0 and later, if you introspect a relation of this type it will trigger a validation error. To fix this, you will need to add a @unique constraint to the referenced field.